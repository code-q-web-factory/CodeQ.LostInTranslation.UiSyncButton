{
  "version": 3,
  "sources": ["../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/manifest.ts", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/createConsumerApi.ts", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/readFromConsumerApi.ts", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/registry/AbstractRegistry.ts", "../../Private/UI/node_modules/@neos-project/positional-array-sorter/src/positionalArraySorter.ts", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/registry/SynchronousRegistry.ts", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/registry/SynchronousMetaRegistry.ts", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/registry/index.ts", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/index.ts", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/react/index.js", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/prop-types/index.js", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/react-ui-components/index.js", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/react-redux/index.js", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/classnames/index.js", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/neos-ui-decorators/index.js", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/redux-actions/index.js", "../../Private/UI/src/actions.js", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/plow-js/index.js", "../../Private/UI/src/Containers/SecondaryToolbar/SyncButton/index.js", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/neos-ui-i18n/index.js", "../../Private/UI/src/Containers/SecondaryToolbar/SyncModal/index.js", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/redux-saga/effects/index.js", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/neos-ui-redux-store/index.js", "../../Private/UI/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/neos-ui-backend-connector/index.js", "../../Private/UI/src/Endpoints/index.js", "../../Private/UI/src/Sagas/index.js", "../../Private/UI/src/manifest.js", "../../Private/UI/src/index.js"],
  "sourcesContent": ["export default (manifests: any[]) => {\n    return (identifier: string, options: {}, bootstrap: () => void) => {\n        manifests.push({\n            [identifier]: {\n                options,\n                bootstrap\n            }\n        });\n    };\n};\n", "// import {version} from '../package.json';\nimport createManifestFunction from './manifest';\n\nconst createReadOnlyValue = (value: any) => ({\n    value,\n    writable: false,\n    enumerable: false,\n    configurable: true\n});\n\ninterface ExposureMap {\n    [propName: string]: any;\n}\nexport default function createConsumerApi(manifests: any[], exposureMap: ExposureMap): void {\n    const api = {};\n\n    Object.keys(exposureMap).forEach(key => {\n        Object.defineProperty(api, key, createReadOnlyValue(exposureMap[key]));\n    });\n\n    Object.defineProperty(api, '@manifest', createReadOnlyValue(\n        createManifestFunction(manifests)\n    ));\n\n    Object.defineProperty(window, '@Neos:HostPluginAPI', createReadOnlyValue(api));\n    // TODO: bring back VERSION\n    // Object.defineProperty(window['@Neos:HostPluginAPI'], 'VERSION', createReadOnlyValue(version));\n}\n", "export default function readFromConsumerApi(key: string): (...args: any[]) => any {\n    return (...args: any[]) => {\n        if ((window as any)['@Neos:HostPluginAPI'] && (window as any)['@Neos:HostPluginAPI'][`@${key}`]) {\n            return (window as any)['@Neos:HostPluginAPI'][`@${key}`](...args);\n        }\n\n        throw new Error('You are trying to read from a consumer api that hasn\\'t been initialized yet!');\n    };\n}\n", "export default class AbstractRegistry {\n    public SERIAL_VERSION_UID = 'd8a5aa78-978e-11e6-ae22-56b6b6499611';\n\n    public description: string;\n\n    constructor(description: string) {\n        // The description of the registry, containing examples, what is in there.\n        this.description = description;\n    }\n}\n", "interface Value {\n    [propName: string]: any;\n}\ntype Index = number;\n\n/**\n * Flexible array sorter that sorts an array according to a \"position\" meta data.\n * The expected format for the subject is:\n *\n * [\n *   [\n *     'key' => 'bar'\n *     'position' => '<position-string>',\n *   ],\n *   [\n *     'key' => 'baz'\n *     'position' => '<position-string>',\n *   ],\n * ]\n *\n * The <position-string> supports one of the following syntax:\n *  start (<weight>)\n *  end (<weight>)\n *  before <key> (<weight>)\n *  after <key> (<weight>)\n *  <numerical-order>\n *\n * where \"weight\" is the priority that defines which of two conflicting positions overrules the other,\n * \"key\" is a string that references another key in the subject\n * and \"numerical-order\" is an integer that defines the order independently from the other keys.\n */\ntype PositionAccessor = (value: Value) => string | number;\nconst positionalArraySorter = <T extends Value[]>(subject: T, position: string | PositionAccessor = 'position', idKey = 'key'): T => {\n    const positionAccessor = typeof position === 'string' ? (value: Value) => value[position] : position;\n    // internally we work with string representations of the index/item-key\n    const indexMapping: {[key: string]: Index} = {};\n    // all \"normal\" keys with numerical or no \"position\", grouped by that position\n    const middleKeys: {[position: number]: string[]} = {};\n    // all keys of items with \"position\" \"start*\" grouped by weight\n    const startKeys: {[weight: number]: string[]} = {};\n    // all keys of items with \"position\" \"end*\" grouped by weight\n    const endKeys: {[weight: number]: string[]} = {};\n    // all keys of items with \"position\" \"before*\" grouped by reference key, grouped by weight\n    const beforeKeys: {[key: string]: {[weight: number]: string[]}} = {};\n    // all keys of items with \"position\" \"after*\" grouped by reference key, grouped by weight\n    const afterKeys: {[key: string]: {[weight: number]: string[]}} = {};\n\n    // group items\n    subject.forEach((item, index) => {\n        const key = item[idKey] ? item[idKey] : String(index);\n        indexMapping[key] = index;\n        const positionValue = positionAccessor(item);\n        const position = String(positionValue ? positionValue : index);\n        let invalid = false;\n        if (position.startsWith('start')) {\n            const weightMatch = position.match(/start\\s+(\\d+)/);\n            const weight = weightMatch && weightMatch[1] ? Number(weightMatch[1]) : 0;\n            if (!startKeys[weight]) {\n                startKeys[weight] = [];\n            }\n            startKeys[weight].push(key);\n        } else if (position.startsWith('end')) {\n            const weightMatch = position.match(/end\\s+(\\d+)/);\n            const weight = weightMatch && weightMatch[1] ? Number(weightMatch[1]) : 0;\n            if (!endKeys[weight]) {\n                endKeys[weight] = [];\n            }\n            endKeys[weight].push(key);\n        } else if (position.startsWith('before')) {\n            const match = position.match(/before\\s+(\\S+)(\\s+(\\d+))?/);\n            if (!match) {\n                invalid = true;\n            } else {\n                const reference = match[1];\n                const weight = match[3] ? Number(match[3]) : 0;\n                if (!beforeKeys[reference]) {\n                    beforeKeys[reference] = {};\n                }\n                if (!beforeKeys[reference][weight]) {\n                    beforeKeys[reference][weight] = [];\n                }\n                beforeKeys[reference][weight].push(key);\n            }\n        } else if (position.startsWith('after')) {\n            const match = position.match(/after\\s+(\\S+)(\\s+(\\d+))?/);\n            if (!match) {\n                invalid = true;\n            } else {\n                const reference = match[1];\n                const weight = match[3] ? Number(match[3]) : 0;\n                if (!afterKeys[reference]) {\n                    afterKeys[reference] = {};\n                }\n                if (!afterKeys[reference][weight]) {\n                    afterKeys[reference][weight] = [];\n                }\n                afterKeys[reference][weight].push(key);\n            }\n        } else {\n            invalid = true;\n        }\n        if (invalid) {\n            let numberPosition = parseFloat(position);\n            if (isNaN(numberPosition) || !isFinite(numberPosition)) {\n                numberPosition = index;\n            }\n            if (!middleKeys[numberPosition]) {\n                middleKeys[numberPosition] = [];\n            }\n            middleKeys[numberPosition].push(key);\n        }\n    });\n\n    const resultStart: string[] = [];\n    const resultMiddle: string[] = [];\n    const resultEnd: string[] = [];\n    const processedKeys: string[] = [];\n\n    // helper function to retrieve all weights in e.g. beforeKeys[...] in the necessary order\n    const sortedWeights = (dict: {[key: number]: any}, asc: boolean) => {\n        const weights = Object.keys(dict).map(x => Number(x)).sort((a, b) => a - b);\n        return asc ? weights : weights.reverse();\n    };\n    // helper function to add all keys of a grouping to a then ordered result set considering before and after keys\n    const addToResults = (keys: string[], result: string[]) => {\n        keys.forEach(key => {\n            if (processedKeys.indexOf(key) >= 0) {\n                return;\n            }\n            processedKeys.push(key);\n            if (beforeKeys[key]) {\n                const beforeWeights = sortedWeights(beforeKeys[key], true);\n                for (const i of beforeWeights) {\n                    addToResults(beforeKeys[key][i], result);\n                }\n            }\n            result.push(key);\n            if (afterKeys[key]) {\n                const afterWeights = sortedWeights(afterKeys[key], false);\n                for (const i of afterWeights) {\n                    addToResults(afterKeys[key][i], result);\n                }\n            }\n        });\n    };\n\n    // add all start* keys weighted in descending order\n    for (const i of sortedWeights(startKeys, false)) {\n        addToResults(startKeys[i], resultStart);\n    }\n    // add all middle keys weighted in ascending order\n    for (const i of sortedWeights(middleKeys, true)) {\n        addToResults(middleKeys[i], resultMiddle);\n    }\n    // add all after* keys weighted in ascending order\n    for (const i of sortedWeights(endKeys, true)) {\n        addToResults(endKeys[i], resultEnd);\n    }\n    // orphaned items\n    for (const key of Object.keys(beforeKeys)) {\n        if (processedKeys.indexOf(key) >= 0) {\n            continue;\n        }\n        // add all \"orphaned\" before* key in descending order before the middle keys\n        for (const i of sortedWeights(beforeKeys[key], false)) {\n            addToResults(beforeKeys[key][i], resultStart);\n        }\n    }\n    for (const key of Object.keys(afterKeys)) {\n        if (processedKeys.indexOf(key) >= 0) {\n            continue;\n        }\n        // add all \"orphaned\" after* key in descending order before the end* keys\n        for (const i of sortedWeights(afterKeys[key], false)) {\n            addToResults(afterKeys[key][i], resultMiddle);\n        }\n    }\n    const sortedKeys = [...resultStart, ...resultMiddle, ...resultEnd];\n    // TODO fix type assertion\n    return sortedKeys.map(key => indexMapping[key]).map(i => subject[i]) as T;\n};\nexport default positionalArraySorter;\n", "import AbstractRegistry from './AbstractRegistry';\nimport positionalArraySorter from '@neos-project/positional-array-sorter';\n\ninterface Entry<T> {\n    key: string;\n    value: T;\n    position?: string | number;\n}\n\nexport default class SynchronousRegistry<T> extends AbstractRegistry {\n    protected _registry: Array<Entry<T>>;\n\n    constructor(description: string) {\n        super(description);\n\n        this._registry = [];\n    }\n\n    /*\n     * Sets a key in a registry to the given value\n     *\n     * @param string key Registry key to set. May contain slashes to delimit nested keys, e.g. \"nested/key\".\n     * @param Object value A value to set.\n     * @param string|number position A position inside a registry that the given element should get, supports full positionalArraySorter syntax. Defaults to 0.\n     * @return returns the value element.\n     */\n    public set(key: string, value: T, position: string | number = 0): T {\n        if (typeof key !== 'string') {\n            throw new Error('Key must be a string');\n        }\n        if (typeof position !== 'string' && typeof position !== 'number') {\n            throw new Error('Position must be a string or a number');\n        }\n        const entry: Entry<T> = {key, value};\n        if (position) {\n            entry.position = position;\n        }\n        const indexOfItemWithTheSameKey = this._registry.findIndex(item => item.key === key);\n        if (indexOfItemWithTheSameKey === -1) {\n            this._registry.push(entry);\n        } else {\n            this._registry[indexOfItemWithTheSameKey] = entry;\n        }\n\n        return value;\n    }\n\n    /*\n     * Gets a registry value at a certain key\n     */\n    public get(key: string): T | null {\n        if (typeof key !== 'string') {\n            console.error('Key must be a string'); // tslint:disable-line no-console\n            return null;\n        }\n        const result = this._registry.find(item => item.key === key);\n        return result ? result.value : null;\n    }\n\n    private _getChildrenWrapped(searchKey: string): any[] {\n        const unsortedChildren = this._registry.filter(item => item.key.indexOf(searchKey + '/') === 0);\n        return positionalArraySorter(unsortedChildren);\n    }\n\n    /*\n     * Gets all values starting with a certain key, as an Object\n     *\n     * @param string searchKey to match, e.g. `test` would match `test/abc` and `test/abc2`, but not `test` itself\n     * @return Object Result Object\n     */\n    public getChildrenAsObject(searchKey: string): {[propName: string]: T | undefined} {\n        const result: {[propName: string]: T | undefined} = {};\n        this._getChildrenWrapped(searchKey).forEach(item => {\n            result[item.key] = item.value;\n        });\n        return result;\n    }\n\n    /*\n     * Gets all values starting with a certain key, as a list\n     *\n     * @param string searchKey to match, e.g. `test` would match `test/abc` and `test/abc2`, but not `test` itself\n     * @return array\n     */\n    public getChildren(searchKey: string): T[] {\n        return this._getChildrenWrapped(searchKey).map(item => item.value);\n    }\n\n    /*\n     * Checks if a certain key exists in the registry\n     *\n     * @param string key\n     * @return true|undefined\n     */\n    public has(key: string): boolean {\n        if (typeof key !== 'string') {\n            console.error('Key must be a string'); // tslint:disable-line:no-console\n            return false;\n        }\n        return Boolean(this._registry.find(item => item.key === key));\n    }\n\n    private _getAllWrapped(): any[] {\n        return positionalArraySorter(this._registry);\n    }\n\n    /*\n     * Gets all values, as an object\n     *\n     * @return Object Result object\n     */\n    public getAllAsObject(): {[propName: string]: T | undefined} {\n        const result: {[propName: string]: T} = {};\n        this._getAllWrapped().forEach(item => {\n            result[item.key] = item.value;\n        });\n        return result;\n    }\n\n    /*\n     * Gets all values, as a list, with id property on each object set to its key\n     *\n     * @return array Result list\n     */\n    public getAllAsList(): T[] {\n        return this._getAllWrapped().map(item => Object.assign({id: item.key}, item.value));\n    }\n}\n", "import SynchronousRegistry from './SynchronousRegistry';\n\nexport default class SynchronousMetaRegistry<T> extends SynchronousRegistry<T> {\n    public set(key: string, value: any): any {\n        if (value.SERIAL_VERSION_UID !== 'd8a5aa78-978e-11e6-ae22-56b6b6499611') {\n            throw new Error('You can only add registries to a meta registry');\n        }\n\n        return super.set(key, value);\n    }\n}\n", "import SynchronousRegistry from './SynchronousRegistry';\nimport SynchronousMetaRegistry from './SynchronousMetaRegistry';\n\nexport {\n    SynchronousRegistry,\n    SynchronousMetaRegistry\n};\n", "import createConsumerApi from './createConsumerApi';\nimport readFromConsumerApi from './readFromConsumerApi';\nimport {\n    SynchronousRegistry,\n    SynchronousMetaRegistry\n} from './registry/index';\n\nexport default readFromConsumerApi('manifest');\n\nexport {\n    createConsumerApi,\n    readFromConsumerApi,\n    SynchronousRegistry,\n    SynchronousMetaRegistry\n};\n", "import readFromConsumerApi from '../../../readFromConsumerApi';\n\nmodule.exports = readFromConsumerApi('vendor')().React;\n", "import readFromConsumerApi from '../../../readFromConsumerApi';\n\nmodule.exports = readFromConsumerApi('vendor')().PropTypes;\n", "import readFromConsumerApi from '../../../readFromConsumerApi';\n\nmodule.exports = readFromConsumerApi('NeosProjectPackages')().ReactUiComponents;\n", "import readFromConsumerApi from '../../../readFromConsumerApi';\n\nmodule.exports = readFromConsumerApi('vendor')().reactRedux;\n", "import readFromConsumerApi from '../../../readFromConsumerApi';\n\nmodule.exports = readFromConsumerApi('vendor')().classnames;\n", "import readFromConsumerApi from '../../../readFromConsumerApi';\n\nmodule.exports = readFromConsumerApi('NeosProjectPackages')().NeosUiDecorators;\n", "import readFromConsumerApi from '../../../readFromConsumerApi';\n\nmodule.exports = readFromConsumerApi('vendor')().reduxActions;\n", "import {createAction, handleActions} from 'redux-actions';\n\nexport const actionTypes = {\n    TOGGLE_SYNC_MODAL: 'CodeQ.LostInTranslation.UiSyncButton/TOGGLE_SYNC_MODAL',\n    TOGGLE_SYNC_MODAL_LOADING: 'CodeQ.LostInTranslation.UiSyncButton/TOGGLE_SYNC_MODAL_LOADING',\n    SET_SELECTED_SOURCE_LANGUAGE: 'CodeQ.LostInTranslation.UiSyncButton/SET_SELECTED_SOURCE_LANGUAGE',\n    SET_CONFIRM: 'CodeQ.LostInTranslation.UiSyncButton/SET_CONFIRM',\n    TRANSLATE_DOCUMENT: 'CodeQ.LostInTranslation.UiSyncButton/TRANSLATE_DOCUMENT',\n    RESET_SYNC_MODAL: 'CodeQ.LostInTranslation.UiSyncButton/RESET_MODAL'\n};\n\nconst toggleSyncModal = createAction(actionTypes.TOGGLE_SYNC_MODAL);\nconst toggleSyncModalLoading = createAction(actionTypes.TOGGLE_SYNC_MODAL_LOADING);\nconst translateDocument = createAction(actionTypes.TRANSLATE_DOCUMENT);\nconst resetSyncModal = createAction(actionTypes.RESET_SYNC_MODAL);\nconst setSelectedSourceLanguage = createAction(actionTypes.SET_SELECTED_SOURCE_LANGUAGE);\nconst setConfirm = createAction(actionTypes.SET_CONFIRM);\n\nexport const actions = {\n    toggleSyncModal,\n    toggleSyncModalLoading,\n    translateDocument,\n    resetSyncModal,\n    setSelectedSourceLanguage,\n    setConfirm\n};\n\nexport const reducer = handleActions(\n    {\n        [actionTypes.SET_SELECTED_SOURCE_LANGUAGE]: (state, action) => ({\n            ...state,\n            plugins: {\n                ...state?.plugins,\n                translationSyncModal: {\n                    ...state?.plugins?.translationSyncModal,\n                    selectedSourceLanguage: action.payload\n                },\n            },\n        }),\n        [actionTypes.SET_CONFIRM]: (state, action) => ({\n            ...state,\n            plugins: {\n                ...state?.plugins,\n                translationSyncModal: {\n                    ...state?.plugins?.translationSyncModal,\n                    confirm: action.payload\n                },\n            },\n        }),\n        [actionTypes.TOGGLE_SYNC_MODAL]: (state, action) => ({\n            ...state,\n            plugins: {\n                ...state?.plugins,\n                translationSyncModal: {\n                    ...state.plugins?.translationSyncModal,\n                    open: action.payload !== undefined ? action.payload.open : !(state.plugins?.translationSyncModal?.open || false),\n                },\n            },\n        }),\n        [actionTypes.TOGGLE_SYNC_MODAL_LOADING]: (state, action) => ({\n            ...state,\n            plugins: {\n                ...state?.plugins,\n                translationSyncModal: {\n                    ...state.plugins?.translationSyncModal,\n                    loading: action.payload !== undefined ? action.payload.loading : !(state.plugins?.translationSyncModal?.loading || false),\n                },\n            },\n        }),\n        [actionTypes.RESET_SYNC_MODAL]: (state, action) => ({\n            ...state,\n            plugins: {\n                ...state?.plugins,\n                translationSyncModal: {\n                    open: false,\n                    loading: false,\n                    selectedSourceLanguage: null,\n                    confirm: false\n                }\n            }\n        })\n    },\n    {\n        plugins: {\n            translationSyncModal: {\n                open: false,\n                loading: false,\n                selectedSourceLanguage: null,\n                confirm: false\n            },\n        },\n    }\n);\n\nexport const selectors = {\n    translationSyncModalOpen: (state) => state.plugins?.translationSyncModal?.open,\n    translationSyncModalLoading: (state) => state.plugins?.translationSyncModal?.loading,\n    translationSyncModalSelectedSourceLanguage: (state) => state.plugins?.translationSyncModal?.selectedSourceLanguage,\n    translationSyncModalConfirmed: (state) => state.plugins?.translationSyncModal?.confirm\n};\n", "import readFromConsumerApi from '../../../readFromConsumerApi';\n\nmodule.exports = readFromConsumerApi('vendor')().plow;\n", "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {IconButton} from '@neos-project/react-ui-components';\nimport {connect} from 'react-redux';\nimport mergeClassNames from 'classnames';\nimport style from './style.module.css';\nimport {neos} from '@neos-project/neos-ui-decorators';\nimport {actions} from '../../../actions'\nimport {$get, $transform} from \"plow-js\";\n\n@neos(globalRegistry => ({\n    i18nRegistry: globalRegistry.get('i18n')\n}))\n\n@connect($transform({\n    languages: $get('cr.contentDimensions.byName.language.presets'),\n    currentDocumentNodePath: $get('cr.nodes.documentNode')\n}),\n{\n    toggleAction: actions.toggleSyncModal\n})\nexport default class SyncButton extends PureComponent {\n    static propTypes = {\n        toggleAction: PropTypes.func,\n        i18nRegistry: PropTypes.object.isRequired,\n        languages: PropTypes.object,\n        currentDocumentNodePath: PropTypes.string\n    };\n\n    isInTranslatableLanguage = () => {\n        try {\n            const {currentDocumentNodePath, languages} = this.props;\n            let currentLanguageDimension = currentDocumentNodePath.match(/(language=)[a-z]+;?/)[0];\n            currentLanguageDimension = currentLanguageDimension.replace('language=', '').replace(';', '');\n            return languages[currentLanguageDimension]?.options?.translationStrategy === 'once';\n        } catch (e) {\n            return false\n        }\n    }\n\n    handleClick = () => {\n        const {toggleAction} = this.props;\n        toggleAction({open: true});\n    }\n\n    render() {\n        const {i18nRegistry} = this.props;\n\n        const buttonClassNames = mergeClassNames({\n            [style.secondaryToolbar__buttonLink]: true\n        });\n\n        return (\n            <IconButton\n                icon=\"globe\"\n                className={buttonClassNames}\n                onClick={this.handleClick}\n                aria-label={i18nRegistry.translate('CodeQ.LostInTranslation.UiSyncButton:Main:translate', 'Translate')}\n                title={i18nRegistry.translate('CodeQ.LostInTranslation.UiSyncButton:Main:translate', 'Translate')}\n                disabled={!this.isInTranslatableLanguage()}\n            />\n        );\n    }\n}\n", "import readFromConsumerApi from '../../../readFromConsumerApi';\n\nmodule.exports = readFromConsumerApi('NeosProjectPackages')().NeosUiI18n;\n", "import React, {Fragment, PureComponent} from \"react\";\nimport {connect} from \"react-redux\";\nimport {actions} from \"../../../actions\";\nimport {$transform, $get} from \"plow-js\";\nimport {Button, CheckBox, Dialog, Label, SelectBox} from '@neos-project/react-ui-components'\nimport PropTypes from \"prop-types\";\nimport {neos} from '@neos-project/neos-ui-decorators';\nimport I18n from '@neos-project/neos-ui-i18n';\nimport style from './style.module.css'\n\n@neos(globalRegistry => ({\n    i18nRegistry: globalRegistry.get('i18n')\n}))\n\n@connect($transform({\n    isOpen: $get('plugins.translationSyncModal.open'),\n    isLoading: $get('plugins.translationSyncModal.loading'),\n    selectedSourceLanguage: $get('plugins.translationSyncModal.selectedSourceLanguage'),\n    confirmed: $get('plugins.translationSyncModal.confirm'),\n    availableLanguages: $get('cr.contentDimensions.byName.language.presets'),\n    currentDocumentNodePath: $get('cr.nodes.documentNode')\n}),\n{\n    setSelectedSourceLanguageAction: actions.setSelectedSourceLanguage,\n    setConfirmAction: actions.setConfirm,\n    resetAction: actions.resetSyncModal,\n    translateDocumentAction: actions.translateDocument,\n    toggleLoading: actions.toggleSyncModalLoading\n})\nexport default class SyncModal extends PureComponent {\n    static propTypes = {\n        isOpen: PropTypes.bool.isRequired,\n        resetAction: PropTypes.func.isRequired,\n        setSelectedSourceLanguageAction: PropTypes.func.isRequired,\n        setConfirmAction: PropTypes.func.isRequired,\n        translateDocumentAction: PropTypes.func.isRequired,\n        i18nRegistry: PropTypes.object.isRequired,\n        currentDocumentNodePath: PropTypes.string,\n        confirmed: PropTypes.bool,\n        selectedSourceLanguage: PropTypes.string,\n        toggleLoading: PropTypes.func.isRequired\n    }\n\n    getAvailableSourceLanguages = () => {\n        let {availableLanguages} = this.props;\n        availableLanguages = Object.entries(availableLanguages || {}).filter(([key, value]) => (value?.options?.translationStrategy !== 'once' && value?.options?.translationStrategy !== 'sync'))\n        return availableLanguages.map(([key, value]) => {\n            return {\n                value: key,\n                label: value.label\n            }\n        })\n    }\n\n    setConfirm = (value) => {\n        const {setConfirmAction} = this.props;\n        setConfirmAction(value)\n    }\n\n    setSourceLanguage = (value) => {\n        const {setSelectedSourceLanguageAction} = this.props;\n        setSelectedSourceLanguageAction(value)\n    }\n\n    handleBack = () => {\n        const {resetAction, isLoading} = this.props;\n\n        if (isLoading) {\n            return\n        }\n\n        resetAction();\n    }\n\n    handleTranslate = () => {\n        const {translateDocumentAction, currentDocumentNodePath, selectedSourceLanguage} = this.props;\n        translateDocumentAction({nodeContextPath: currentDocumentNodePath, sourceLanguage: selectedSourceLanguage})\n    }\n\n    renderTitle() {\n        return (\n            <I18n id=\"CodeQ.LostInTranslation.UiSyncButton:Main:translateDocument\" fallback=\"Translate document\" />\n        );\n    }\n\n    renderBackAction() {\n        const {isLoading} = this.props;\n        return (\n            <Button\n                id=\"codeq-lostInTranslation-uiSyncButton-dialog-Back\"\n                key=\"back\"\n                style=\"lighter\"\n                hoverStyle=\"brand\"\n                onClick={this.handleBack}\n                disabled={isLoading}\n            >\n                <I18n id=\"Neos.Neos:Main:back\" fallback=\"Back\"/>\n            </Button>\n        );\n    }\n\n    renderTranslateAction() {\n        const {confirmed, selectedSourceLanguage, isLoading} = this.props;\n        return (\n            <Button\n                id=\"codeq-lostInTranslation-uiSyncButton-dialog-Translate\"\n                key=\"translate\"\n                style=\"success\"\n                hoverStyle=\"brand\"\n                onClick={this.handleTranslate}\n                disabled={!confirmed || !selectedSourceLanguage || isLoading}\n            >\n                <I18n id=\"CodeQ.LostInTranslation.UiSyncButton:Main:translate\" fallback=\"Translate\" />\n            </Button>\n        );\n    }\n\n    renderSourceLanguageSelectBox() {\n        const {i18nRegistry, selectedSourceLanguage, isLoading} = this.props;\n        return (\n            <div className={style.select}>\n                <I18n id=\"CodeQ.LostInTranslation.UiSyncButton:Main:sourceLanguage\" fallback=\"Source language\" className={style.select__label} />\n                <SelectBox\n                    options={this.getAvailableSourceLanguages()}\n                    value={selectedSourceLanguage}\n                    onValueChange={this.setSourceLanguage}\n                    placeholderIcon=\"language\"\n                    placeholder={i18nRegistry.translate('CodeQ.LostInTranslation.UiSyncButton:Main:chooseLanguage', 'Please select a language\u2026')}\n                    disabled={isLoading}\n                />\n            </div>\n        )\n    }\n\n    render() {\n        const {isOpen, isLoading, confirmed} = this.props;\n        if (!isOpen) {\n            return null;\n        }\n        return (\n            <Dialog\n                actions={[this.renderBackAction(), this.renderTranslateAction()]}\n                title={this.renderTitle()}\n                onRequestClose={this.handleBack}\n                type=\"success\"\n                isOpen\n            >\n                <div className={style.body}>\n                    {this.renderSourceLanguageSelectBox()}\n\n                    <Label className={style.confirm__label}>\n                        <CheckBox\n                            isChecked={confirmed}\n                            disabled={isLoading}\n                            onChange={this.setConfirm}\n                        />\n                        <I18n id=\"CodeQ.LostInTranslation.UiSyncButton:Main:confirmDeletingOfCurrentContent\" />\n                    </Label>\n                </div>\n            </Dialog>\n        );\n    }\n}\n", "import readFromConsumerApi from '../../../../readFromConsumerApi';\n\nmodule.exports = readFromConsumerApi('vendor')().reduxSagaEffects;\n", "import readFromConsumerApi from '../../../readFromConsumerApi';\n\nmodule.exports = readFromConsumerApi('NeosProjectPackages')().NeosUiReduxStore;\n", "import readFromConsumerApi from '../../../readFromConsumerApi';\n\nexport default readFromConsumerApi('NeosProjectPackages')().NeosUiBackendConnectorDefault;\n\nconst {fetchWithErrorHandling} = readFromConsumerApi('NeosProjectPackages')().NeosUiBackendConnector;\nexport {fetchWithErrorHandling};\n", "import {fetchWithErrorHandling} from \"@neos-project/neos-ui-extensibility/dist/shims/neosProjectPackages/neos-ui-backend-connector\";\n\nexport default (routes) => {\n    const translate = (nodeContextPath, sourceLanguage) => fetchWithErrorHandling.withCsrfToken(csrfToken => ({\n        url: '/codeq/translation-service/translate',\n\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n            'X-Flow-Csrftoken': csrfToken,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            node: nodeContextPath,\n            sourceLanguage: sourceLanguage\n        })\n    })).then(response => fetchWithErrorHandling.parseJson(response))\n    .catch(reason => fetchWithErrorHandling.generalErrorHandler(reason));\n\n    return {\n        translate\n    }\n}\n", "import {takeLatest, put, call} from 'redux-saga/effects';\n\nimport {actions, actionTypes} from '../actions'\nimport {actions as neosActions} from '@neos-project/neos-ui-redux-store';\n\nimport initializeEndpoints from '../Endpoints'\n\nexport function * translateDocument() {\n    const endpoints = initializeEndpoints()\n    yield takeLatest(actionTypes.TRANSLATE_DOCUMENT, function * performPropertyChange(action) {\n        const {nodeContextPath, sourceLanguage} = action.payload;\n        yield put(actions.toggleSyncModalLoading({loading: true}))\n        const feedback = yield call(endpoints.translate, nodeContextPath, sourceLanguage)\n        yield put(actions.resetSyncModal())\n        yield put(neosActions.ServerFeedback.handleServerFeedback(feedback));\n    });\n}\n", "import manifest from '@neos-project/neos-ui-extensibility';\nimport SyncButton from \"./Containers/SecondaryToolbar/SyncButton\";\nimport {actions, reducer, selectors} from \"./actions\"\nimport SyncModal from \"./Containers/SecondaryToolbar/SyncModal\";\nimport * as sagas from './Sagas'\n\nmanifest('CodeQ.LostInTranslation.UiSyncButton:DoesSomethingHere', {}, globalRegistry => {\n    globalRegistry.get('reducers').set('CodeQ.LostInTranslation.UiSyncButton', { reducer });\n\n    const containerRegistry = globalRegistry.get('containers');\n    containerRegistry.set('SecondaryToolbar/Right/SyncButton', SyncButton);\n    containerRegistry.set('Modals/TranslationSyncModal', SyncModal);\n\n    const sagasRegistry = globalRegistry.get('sagas');\n    sagasRegistry.set('CodeQ.LostInTranslation.UiSyncButton/translateDocument', {saga: sagas.translateDocument})\n});\n", "require('./manifest');\n"],
  "mappings": "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",
  "names": ["init_manifest", "__esmMin", "init_createConsumerApi", "__esmMin", "init_manifest", "readFromConsumerApi", "key", "args", "init_readFromConsumerApi", "__esmMin", "init_AbstractRegistry", "__esmMin", "init_positionalArraySorter", "__esmMin", "init_SynchronousRegistry", "__esmMin", "init_AbstractRegistry", "init_positionalArraySorter", "init_SynchronousMetaRegistry", "__esmMin", "init_SynchronousRegistry", "init_registry", "__esmMin", "init_SynchronousRegistry", "init_SynchronousMetaRegistry", "dist_default", "init_dist", "__esmMin", "init_createConsumerApi", "init_readFromConsumerApi", "init_registry", "readFromConsumerApi", "require_react", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_prop_types", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_react_ui_components", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_react_redux", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_classnames", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_neos_ui_decorators", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_redux_actions", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "import_redux_actions", "actionTypes", "toggleSyncModal", "toggleSyncModalLoading", "translateDocument", "resetSyncModal", "setSelectedSourceLanguage", "setConfirm", "actions", "reducer", "init_actions", "__esmMin", "state", "action", "require_plow_js", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "import_react", "import_prop_types", "import_react_ui_components", "import_react_redux", "import_classnames", "import_neos_ui_decorators", "import_plow_js", "SyncButton", "init_SyncButton", "__esmMin", "init_style_module", "init_actions", "currentDocumentNodePath", "languages", "currentLanguageDimension", "toggleAction", "i18nRegistry", "buttonClassNames", "mergeClassNames", "style_module_default", "React", "PropTypes", "__decorateClass", "globalRegistry", "actions", "require_neos_ui_i18n", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "import_react", "import_react_redux", "import_plow_js", "import_react_ui_components", "import_prop_types", "import_neos_ui_decorators", "import_neos_ui_i18n", "SyncModal", "init_SyncModal", "__esmMin", "init_actions", "init_style_module", "availableLanguages", "key", "value", "setConfirmAction", "setSelectedSourceLanguageAction", "resetAction", "isLoading", "translateDocumentAction", "currentDocumentNodePath", "selectedSourceLanguage", "React", "I18n", "confirmed", "i18nRegistry", "style_module_default", "isOpen", "PropTypes", "__decorateClass", "globalRegistry", "actions", "require_effects", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_neos_ui_redux_store", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "neos_ui_backend_connector_default", "fetchWithErrorHandling", "init_neos_ui_backend_connector", "__esmMin", "init_readFromConsumerApi", "readFromConsumerApi", "Endpoints_default", "init_Endpoints", "__esmMin", "init_neos_ui_backend_connector", "routes", "nodeContextPath", "sourceLanguage", "fetchWithErrorHandling", "csrfToken", "response", "reason", "translateDocument", "endpoints", "Endpoints_default", "actionTypes", "action", "nodeContextPath", "sourceLanguage", "actions", "feedback", "neosActions", "import_effects", "import_neos_ui_redux_store", "init_Sagas", "__esmMin", "init_actions", "init_Endpoints", "manifest_exports", "init_manifest", "__esmMin", "init_dist", "init_SyncButton", "init_actions", "init_SyncModal", "init_Sagas", "dist_default", "globalRegistry", "reducer", "containerRegistry", "SyncButton", "SyncModal", "translateDocument"]
}
